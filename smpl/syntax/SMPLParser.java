
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 01 12:13:23 UTC 2018
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 01 12:13:23 UTC 2018
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\006\011\000\002\011" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\005" +
    "\000\002\010\003\000\002\005\005\000\002\014\006\000" +
    "\002\016\010\000\002\015\011\000\002\015\007\000\002" +
    "\015\005\000\002\025\010\000\002\025\006\000\002\022" +
    "\006\000\002\021\006\000\002\023\005\000\002\024\005" +
    "\000\002\013\003\000\002\013\003\000\002\012\005\000" +
    "\002\012\003\000\002\017\007\000\002\017\003\000\002" +
    "\020\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\031\005\000\002" +
    "\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\032\005\015\043\014\044\026\045\032\047" +
    "\007\050\005\053\004\055\030\056\024\057\035\064\033" +
    "\065\013\001\002\000\004\005\157\001\002\000\004\005" +
    "\155\001\002\000\040\002\ufff7\005\ufff7\010\ufff7\013\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7\053\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\064\ufff7\065\ufff7\001\002\000\004" +
    "\005\120\001\002\000\040\002\ufffa\005\ufffa\010\ufffa\013" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\047\ufffa\050\ufffa\053\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\064\ufffa\065\ufffa\001\002\000" +
    "\040\002\ufffc\005\ufffc\010\ufffc\013\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\047\ufffc\050\ufffc\053\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\064\ufffc\065\ufffc\001\002\000\040\002\ufff4\005\ufff4" +
    "\010\ufff4\013\ufff4\043\ufff4\044\ufff4\045\ufff4\047\ufff4\050" +
    "\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\064\ufff4\065\ufff4" +
    "\001\002\000\066\002\uffd1\005\uffd1\006\uffd1\010\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\064\uffd1\065\uffd1\001\002\000\010\005\015\064\033\065" +
    "\013\001\002\000\010\005\015\064\033\065\013\001\002" +
    "\000\004\002\110\001\002\000\064\002\uffd3\005\uffd3\006" +
    "\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\043\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\064\uffd3\065\uffd3\001\002\000\040\002\ufff6\005" +
    "\ufff6\010\ufff6\013\ufff6\043\ufff6\044\ufff6\045\ufff6\047\ufff6" +
    "\050\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\064\ufff6\065" +
    "\ufff6\001\002\000\044\002\ufff9\005\ufff9\010\ufff9\013\ufff9" +
    "\016\052\017\053\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050" +
    "\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\064\ufff9\065\ufff9" +
    "\001\002\000\040\002\ufff8\005\ufff8\010\ufff8\013\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\053\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\064\ufff8\065\ufff8\001\002\000\066\002" +
    "\uffd4\005\uffd4\006\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\105\043" +
    "\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\057\uffd4\064\uffd4\065\uffd4\001" +
    "\002\000\004\005\102\001\002\000\040\002\ufffb\005\ufffb" +
    "\010\ufffb\013\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\050" +
    "\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\064\ufffb\065\ufffb" +
    "\001\002\000\004\065\100\001\002\000\064\002\uffd8\005" +
    "\uffd8\006\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\020\056\021\057\022\055\043\uffd8\044\uffd8\045" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\064\uffd8\065\uffd8\001\002\000\004\005" +
    "\075\001\002\000\040\002\ufff5\005\ufff5\010\ufff5\013\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5\053\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\064\ufff5\065\ufff5\001\002\000\004" +
    "\005\043\001\002\000\066\002\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\043\uffd2\044\uffd2\045\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\064\uffd2\065\uffd2\001\002\000\040\002\ufffd\005" +
    "\ufffd\010\ufffd\013\ufffd\043\ufffd\044\ufffd\045\ufffd\047\ufffd" +
    "\050\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\064\ufffd\065" +
    "\ufffd\001\002\000\004\005\041\001\002\000\040\002\ufffe" +
    "\005\ufffe\010\ufffe\013\ufffe\043\ufffe\044\ufffe\045\ufffe\047" +
    "\ufffe\050\ufffe\053\ufffe\055\ufffe\056\ufffe\057\ufffe\064\ufffe" +
    "\065\ufffe\001\002\000\034\002\001\005\015\043\014\044" +
    "\026\045\032\047\007\050\005\053\004\055\030\056\024" +
    "\057\035\064\033\065\013\001\002\000\040\002\uffff\005" +
    "\uffff\010\uffff\013\uffff\043\uffff\044\uffff\045\uffff\047\uffff" +
    "\050\uffff\053\uffff\055\uffff\056\uffff\057\uffff\064\uffff\065" +
    "\uffff\001\002\000\004\006\042\001\002\000\040\002\uffe2" +
    "\005\uffe2\010\uffe2\013\uffe2\043\uffe2\044\uffe2\045\uffe2\047" +
    "\uffe2\050\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\064\uffe2" +
    "\065\uffe2\001\002\000\006\006\uffce\065\047\001\002\000" +
    "\004\006\ufff0\001\002\000\006\006\uffce\013\070\001\002" +
    "\000\004\006\064\001\002\000\004\024\050\001\002\000" +
    "\010\005\015\064\033\065\013\001\002\000\012\006\ufff2" +
    "\013\ufff2\016\052\017\053\001\002\000\010\005\015\064" +
    "\033\065\013\001\002\000\010\005\015\064\033\065\013" +
    "\001\002\000\064\002\uffd9\005\uffd9\006\uffd9\010\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\056\021\057" +
    "\022\055\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\064\uffd9" +
    "\065\uffd9\001\002\000\010\005\015\064\033\065\013\001" +
    "\002\000\010\005\015\064\033\065\013\001\002\000\010" +
    "\005\015\064\033\065\013\001\002\000\064\002\uffd6\005" +
    "\uffd6\006\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\064\uffd6\065\uffd6\001\002\000\064\002" +
    "\uffd7\005\uffd7\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\064\uffd7\065\uffd7\001\002\000" +
    "\064\002\uffd5\005\uffd5\006\uffd5\010\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\064\uffd5\065\uffd5\001" +
    "\002\000\064\002\uffda\005\uffda\006\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\016\uffda\017\uffda\020\056\021\057\022" +
    "\055\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\055\uffda\056\uffda\057\uffda\064\uffda\065" +
    "\uffda\001\002\000\004\007\065\001\002\000\032\005\015" +
    "\043\014\044\026\045\032\047\007\050\005\053\004\055" +
    "\030\056\024\057\035\064\033\065\013\001\002\000\034" +
    "\005\015\010\067\043\014\044\026\045\032\047\007\050" +
    "\005\053\004\055\030\056\024\057\035\064\033\065\013" +
    "\001\002\000\040\002\ufff3\005\ufff3\010\ufff3\013\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3\053\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\064\ufff3\065\ufff3\001\002\000\004\065" +
    "\047\001\002\000\004\006\uffee\001\002\000\004\006\ufff1" +
    "\001\002\000\006\006\uffce\013\070\001\002\000\004\006" +
    "\uffef\001\002\000\010\005\015\064\033\065\013\001\002" +
    "\000\010\006\077\016\052\017\053\001\002\000\040\002" +
    "\uffe5\005\uffe5\010\uffe5\013\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\047\uffe5\050\uffe5\053\uffe5\055\uffe5\056\uffe5\057\uffe5\064" +
    "\uffe5\065\uffe5\001\002\000\010\005\015\064\033\065\013" +
    "\001\002\000\044\002\uffed\005\uffed\010\uffed\013\uffed\016" +
    "\052\017\053\043\uffed\044\uffed\045\uffed\047\uffed\050\uffed" +
    "\053\uffed\055\uffed\056\uffed\057\uffed\064\uffed\065\uffed\001" +
    "\002\000\010\005\015\064\033\065\013\001\002\000\010" +
    "\006\104\016\052\017\053\001\002\000\040\002\uffe4\005" +
    "\uffe4\010\uffe4\013\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4" +
    "\050\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\064\uffe4\065" +
    "\uffe4\001\002\000\010\005\015\064\033\065\013\001\002" +
    "\000\004\023\105\001\002\000\064\002\uffcf\005\uffcf\006" +
    "\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\043\uffcf\044\uffcf\045\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\064\uffcf\065\uffcf\001\002\000\004\002\000\001" +
    "\002\000\010\006\112\016\052\017\053\001\002\000\066" +
    "\002\uffd0\005\uffd0\006\uffd0\010\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\064\uffd0\065\uffd0" +
    "\001\002\000\010\016\052\017\053\052\114\001\002\000" +
    "\010\005\015\064\033\065\013\001\002\000\046\002\uffe6" +
    "\005\uffe6\010\uffe6\013\uffe6\016\052\017\053\043\uffe6\044" +
    "\uffe6\045\uffe6\047\uffe6\050\uffe6\051\116\053\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\064\uffe6\065\uffe6\001\002\000\010\005" +
    "\015\064\033\065\013\001\002\000\044\002\uffe7\005\uffe7" +
    "\010\uffe7\013\uffe7\016\052\017\053\043\uffe7\044\uffe7\045" +
    "\uffe7\047\uffe7\050\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\064\uffe7\065\uffe7\001\002\000\004\046\122\001\002\000" +
    "\004\013\143\001\002\000\006\005\123\065\124\001\002" +
    "\000\014\005\015\006\uffce\011\126\064\033\065\013\001" +
    "\002\000\032\005\015\043\014\044\026\045\032\047\007" +
    "\050\005\053\004\055\030\056\024\057\035\064\033\065" +
    "\013\001\002\000\034\005\015\013\uffe8\043\014\044\026" +
    "\045\032\047\007\050\005\053\004\055\030\056\024\057" +
    "\035\064\033\065\013\001\002\000\012\005\015\012\uffce" +
    "\064\033\065\013\001\002\000\004\006\135\001\002\000" +
    "\006\006\uffe0\012\uffe0\001\002\000\016\006\uffde\012\uffde" +
    "\013\uffde\014\uffde\016\052\017\053\001\002\000\010\006" +
    "\uffe1\012\uffe1\013\133\001\002\000\010\005\015\064\033" +
    "\065\013\001\002\000\016\006\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\016\052\017\053\001\002\000\032\005\015\043\014" +
    "\044\026\045\032\047\007\050\005\053\004\055\030\056" +
    "\024\057\035\064\033\065\013\001\002\000\034\005\015" +
    "\013\uffe9\043\014\044\026\045\032\047\007\050\005\053" +
    "\004\055\030\056\024\057\035\064\033\065\013\001\002" +
    "\000\004\012\140\001\002\000\004\006\141\001\002\000" +
    "\032\005\015\043\014\044\026\045\032\047\007\050\005" +
    "\053\004\055\030\056\024\057\035\064\033\065\013\001" +
    "\002\000\034\005\015\013\uffea\043\014\044\026\045\032" +
    "\047\007\050\005\053\004\055\030\056\024\057\035\064" +
    "\033\065\013\001\002\000\006\011\144\042\147\001\002" +
    "\000\004\014\151\001\002\000\004\006\150\001\002\000" +
    "\004\006\uffdc\001\002\000\004\006\uffdb\001\002\000\040" +
    "\002\uffeb\005\uffeb\010\uffeb\013\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\047\uffeb\050\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\064\uffeb\065\uffeb\001\002\000\010\005\015\064\033\065" +
    "\013\001\002\000\006\013\133\014\153\001\002\000\004" +
    "\012\154\001\002\000\004\006\uffdd\001\002\000\004\006" +
    "\156\001\002\000\040\002\uffe3\005\uffe3\010\uffe3\013\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\053\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\064\uffe3\065\uffe3\001\002\000\010" +
    "\005\015\064\033\065\013\001\002\000\010\006\161\016" +
    "\052\017\053\001\002\000\040\002\uffec\005\uffec\010\uffec" +
    "\013\uffec\043\uffec\044\uffec\045\uffec\047\uffec\050\uffec\053" +
    "\uffec\055\uffec\056\uffec\057\uffec\064\uffec\065\uffec\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\042\002\015\003\036\004\035\005\007\006" +
    "\024\014\010\016\033\021\017\022\005\023\030\024\011" +
    "\025\021\026\020\027\026\030\022\031\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\112\027\026\030\022" +
    "\031\016\001\001\000\012\026\110\027\026\030\022\031" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\037\005\007\006" +
    "\024\014\010\016\033\021\017\022\005\023\030\024\011" +
    "\025\021\026\020\027\026\030\022\031\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\045\011\044\032\043\001\001\000\002\001\001\000" +
    "\006\010\071\032\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\050\027\026\030\022\031\016\001" +
    "\001\000\002\001\001\000\010\027\062\030\022\031\016" +
    "\001\001\000\010\027\053\030\022\031\016\001\001\000" +
    "\002\001\001\000\004\030\061\001\001\000\004\030\060" +
    "\001\001\000\004\030\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\065\004\035\005\007\006\024\014" +
    "\010\016\033\021\017\022\005\023\030\024\011\025\021" +
    "\026\020\027\026\030\022\031\016\001\001\000\036\004" +
    "\037\005\007\006\024\014\010\016\033\021\017\022\005" +
    "\023\030\024\011\025\021\026\020\027\026\030\022\031" +
    "\016\001\001\000\002\001\001\000\004\011\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\073\032" +
    "\070\001\001\000\002\001\001\000\012\026\075\027\026" +
    "\030\022\031\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\100\027\026\030\022\031\016\001\001" +
    "\000\002\001\001\000\012\026\102\027\026\030\022\031" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\105\031\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\114\027\026\030\022\031" +
    "\016\001\001\000\002\001\001\000\012\026\116\027\026" +
    "\030\022\031\016\001\001\000\002\001\001\000\004\015" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\131\013\126\026\130\027\026\030\022\031\016\032" +
    "\127\001\001\000\040\003\124\004\035\005\007\006\024" +
    "\014\010\016\033\021\017\022\005\023\030\024\011\025" +
    "\021\026\020\027\026\030\022\031\016\001\001\000\036" +
    "\004\037\005\007\006\024\014\010\016\033\021\017\022" +
    "\005\023\030\024\011\025\021\026\020\027\026\030\022" +
    "\031\016\001\001\000\020\012\131\013\136\026\130\027" +
    "\026\030\022\031\016\032\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\133\027\026\030\022\031\016\001\001\000\002" +
    "\001\001\000\040\003\135\004\035\005\007\006\024\014" +
    "\010\016\033\021\017\022\005\023\030\024\011\025\021" +
    "\026\020\027\026\030\022\031\016\001\001\000\036\004" +
    "\037\005\007\006\024\014\010\016\033\021\017\022\005" +
    "\023\030\024\011\025\021\026\020\027\026\030\022\031" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\141\004\035\005\007\006\024\014\010\016\033\021" +
    "\017\022\005\023\030\024\011\025\021\026\020\027\026" +
    "\030\022\031\016\001\001\000\036\004\037\005\007\006" +
    "\024\014\010\016\033\021\017\022\005\023\030\024\011" +
    "\025\021\026\020\027\026\030\022\031\016\001\001\000" +
    "\006\017\144\020\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\151\026\130\027\026\030\022\031\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\157" +
    "\027\026\030\022\031\016\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // power ::= factor HAT power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpExpt(f, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nlist ::= NIL 
            {
              List RESULT =null;
		 RESULT = List(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("nlist",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list ::= nlist 
            {
              List RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list ::= LSQUARE COLON expList COLON RSQUARE 
            {
              List RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList elist = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
	        RESULT = new List(elist);
				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expList ::= expression 
            {
              ArrayList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
									ArrayList<Exp> lst = new ArrayList<Exp>();
                  lst.add(exp);
                  RESULT = lst;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expList ::= expList COMMA expression 
            {
              ArrayList RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 lst.add(exp); RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expListE ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expListE ::= expList 
            {
              ArrayList RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // readint ::= READINT LPAREN RPAREN 
            {
              ReadInt RESULT =null;
		
			 RESULT = new ReadInt();
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readint",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // read ::= READ LPAREN RPAREN 
            {
              Read RESULT =null;
		
			 RESULT = new Read();
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // println ::= PRINTLN LPAREN expression RPAREN 
            {
              PrintLn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			 RESULT = new PrintLn(e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("println",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // print ::= PRINT LPAREN expression RPAREN 
            {
              Print RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	     RESULT = new Print(e);
	  
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifstatement ::= IF expression THEN expression 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new IfStatement(e, a);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifstatement",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifstatement ::= IF expression THEN expression ELSE expression 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	     RESULT = new IfStatement(e, a, r);
	  
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifstatement",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // proc ::= PROC VARIABLE stmtList 
            {
              Procedure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = Procedure(v, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("proc",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc ::= PROC LPAREN expListE RPAREN stmtList 
            {
              Procedure RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence sl = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
             RESULT = Procedure(el, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("proc",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc ::= PROC LPAREN LSQUARE expListE RSQUARE RPAREN stmtList 
            {
              Procedure RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList param = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence st = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
             RESULT = new Procedure(param, st); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("proc",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call ::= CALL LPAREN proc COMMA list RPAREN 
            {
              Call RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Procedure p = (Procedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	     RESULT = new CALL(p, l);
	  
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("call",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lazystmt ::= LAZY LPAREN expression RPAREN 
            {
              LazyStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
	     RESULT = new LazyStatement(e);
	  
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazystmt",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definition ::= DEF VARIABLE expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bindingsAux ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList<Bindings>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	     	       bl.add(b);
	     	       RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bindings ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bindings ::= binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	    	  bl.add(b);
		  RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // binding ::= VARIABLE EQUAL expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // letStmt ::= LET LPAREN bindings RPAREN LBRACE stmtList RBRACE 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList bs = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence sl = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new StmtLet(bs, sl);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= readint 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ReadInt r = (ReadInt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= read 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Read r = (Read)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= println 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PrintLn p = (PrintLn)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= print 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Print p = (Print)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= ifstatement 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Statement(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= letStmt 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= lazystmt 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		LazyStatement l = (LazyStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= call 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s);
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

